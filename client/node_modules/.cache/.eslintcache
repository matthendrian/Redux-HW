[{"/Users/matthendrian/Desktop/Redux-HW/client/src/index.js":"1","/Users/matthendrian/Desktop/Redux-HW/client/src/App.js":"2","/Users/matthendrian/Desktop/Redux-HW/client/src/serviceWorker.js":"3","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Detail.js":"4","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Success.js":"5","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Login.js":"6","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/NoMatch.js":"7","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Home.js":"8","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Signup.js":"9","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/OrderHistory.js":"10","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/GlobalState.js":"11","/Users/matthendrian/Desktop/Redux-HW/client/src/components/Nav/index.js":"12","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/helpers.js":"13","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/queries.js":"14","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/actions.js":"15","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/mutations.js":"16","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/auth.js":"17","/Users/matthendrian/Desktop/Redux-HW/client/src/utils/reducers.js":"18","/Users/matthendrian/Desktop/Redux-HW/client/src/components/Cart/index.js":"19","/Users/matthendrian/Desktop/Redux-HW/client/src/components/Jumbotron/index.js":"20","/Users/matthendrian/Desktop/Redux-HW/client/src/components/ProductList/index.js":"21","/Users/matthendrian/Desktop/Redux-HW/client/src/components/CategoryMenu/index.js":"22","/Users/matthendrian/Desktop/Redux-HW/client/src/components/CartItem/index.js":"23","/Users/matthendrian/Desktop/Redux-HW/client/src/components/ProductItem/index.js":"24","/Users/matthendrian/Desktop/Redux-HW/client/src/redux/store.js":"25"},{"size":501,"mtime":1635260356941,"results":"26","hashOfConfig":"27"},{"size":2005,"mtime":1635356564237,"results":"28","hashOfConfig":"27"},{"size":5080,"mtime":1635260356944,"results":"29","hashOfConfig":"27"},{"size":3352,"mtime":1635357101587,"results":"30","hashOfConfig":"27"},{"size":1073,"mtime":1635260356943,"results":"31","hashOfConfig":"27"},{"size":1932,"mtime":1635260356942,"results":"32","hashOfConfig":"27"},{"size":371,"mtime":1635260356942,"results":"33","hashOfConfig":"27"},{"size":374,"mtime":1635357327327,"results":"34","hashOfConfig":"27"},{"size":2422,"mtime":1635260356943,"results":"35","hashOfConfig":"27"},{"size":1416,"mtime":1635260356943,"results":"36","hashOfConfig":"27"},{"size":565,"mtime":1635260356944,"results":"37","hashOfConfig":"27"},{"size":1280,"mtime":1635260356939,"results":"38","hashOfConfig":"27"},{"size":1388,"mtime":1635260356945,"results":"39","hashOfConfig":"27"},{"size":961,"mtime":1635260356945,"results":"40","hashOfConfig":"27"},{"size":468,"mtime":1635260356944,"results":"41","hashOfConfig":"27"},{"size":836,"mtime":1635260356945,"results":"42","hashOfConfig":"27"},{"size":1015,"mtime":1635260356945,"results":"43","hashOfConfig":"27"},{"size":1935,"mtime":1635360025504,"results":"44","hashOfConfig":"27"},{"size":2881,"mtime":1635359139753,"results":"45","hashOfConfig":"27"},{"size":234,"mtime":1635260356939,"results":"46","hashOfConfig":"27"},{"size":2051,"mtime":1635357762155,"results":"47","hashOfConfig":"27"},{"size":1678,"mtime":1635358798843,"results":"48","hashOfConfig":"27"},{"size":1764,"mtime":1635358967857,"results":"49","hashOfConfig":"27"},{"size":1677,"mtime":1635358727344,"results":"50","hashOfConfig":"27"},{"size":156,"mtime":1635359725909,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1v8uwjb",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/matthendrian/Desktop/Redux-HW/client/src/index.js",[],["110","111"],"/Users/matthendrian/Desktop/Redux-HW/client/src/App.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/serviceWorker.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Detail.js",["112"],"import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\n//adding react-redux functions useDispatch and useSelector.\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Cart from '../components/Cart';\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  //updating consts with redux functions. \n  const dispatch = useDispatch();\n  const state = useSelector((state) => {\n    return state\n  });\n  //const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Success.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Login.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/pages/NoMatch.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Home.js",["113"],"import React from \"react\";\nimport { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/pages/Signup.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/pages/OrderHistory.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/GlobalState.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/components/Nav/index.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/helpers.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/queries.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/actions.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/mutations.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/auth.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/utils/reducers.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/components/Cart/index.js",["114"],"import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\n//swapping useStoreContex with redux. \nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  //adding redux\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n  //const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/components/Jumbotron/index.js",[],"/Users/matthendrian/Desktop/Redux-HW/client/src/components/ProductList/index.js",["115"],"import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n//adding redux \nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n  //adding redux \n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n  //const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/components/CategoryMenu/index.js",["116"],"import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n//replacing store context with redux. \nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  // adding redux\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n  // const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/components/CartItem/index.js",["117","118"],"import React from 'react';\n//replacing store context with redux.\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n\n  //adding redux\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  //const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","/Users/matthendrian/Desktop/Redux-HW/client/src/components/ProductItem/index.js",["119"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  //adding redux\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n  //const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","/Users/matthendrian/Desktop/Redux-HW/client/src/redux/store.js",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":9,"column":10,"nodeType":"126","messageId":"127","endLine":9,"endColumn":25},{"ruleId":"124","severity":1,"message":"128","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":9,"column":10,"nodeType":"126","messageId":"127","endLine":9,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":4,"column":10,"nodeType":"126","messageId":"127","endLine":4,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":25},{"ruleId":"124","severity":1,"message":"129","line":11,"column":9,"nodeType":"126","messageId":"127","endLine":11,"endColumn":14},{"ruleId":"124","severity":1,"message":"125","line":4,"column":10,"nodeType":"126","messageId":"127","endLine":4,"endColumn":25},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'useStoreContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'state' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]